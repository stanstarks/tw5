created: 20171108043145050
modified: 20171221014453259
tags: [[Software Research]]
title: AI for SE Mind Map
type: text/vnd.tiddlywiki

! Researchers
* Christoph. Treude
* David Lo

! Topics and related fields

* ''Program Synthesis'': natural language to program
** @@color:#859900;Good place to start because there are high quality datasets and excellent examples of previous work.@@
** @@color:#ec5300;Generation may get high evaluation score but cannot run or give wrong answers.@@
** @@color:#ec5300;We have to look for applications of translating from NL (or code) to (not accurate) code.@@
* ''Program Induction'': sample to sample
** @@color:#859900;Powerful models that can simulate modern computer architecture and learn programming paradigms like recursion.@@
** @@color:#ec5300;Now limited to simple tasks.@@
* [[Program Analysis]]: gives proof of correctness in formal language
** we may find related techniques to design metrics for code generation evaluation
* ''Grammar Inference'': traditional program analysis problem of extraction FSA from data
** can be reformulated in the language of machine learning, very close to language modelling
* [[Software Analysis]]

! Algorithms and models

* Domain-Specific Language based models
** Can we learn DSL with rule extraction?
** Learning from LM or NTM unless it can be done end2end. An idea is to use NTM for [[SimplePrograms|Program Synthesis for Character Level Language Modeling]]
* [[Natual language processing|NLP]]
** seq2seq model and many [[Neural Machine Translation]] works can be used directly in program analysis
* [[Sequential Models]]
** advanced architecture e.g. [[Memory Networks]] and [[Neural Abstract Machines]] are strong and effective
* [[Reinforcement Learning]]
** automatic discovery of program context, better training framework and many other applications
* [[Probabilistic Models]]
** training with unlabeled data.
* [[Deep Generative Models]]
** Adversarial training in unsupervised setting
* [[Autoregressive Models]]
** another sequence to sequence translation technique.
* [[Unsupervised Learning]]
** On mining knowledge from forums, etc.

! Software applications

||!formal logic way|!deep learning way|
|Code migration|pattern matching|[[Neural Machine Translation]]|
|Code fixing|compiler theory|[[Language Modelling]]|
|Code generation|DSL-based Models|[[Source Code Generating Models]]|
|Security|program analysis|sequence classification and [[Reinforcement Learning]]|

Other applications I can think of

* testing
* debugging
** bug localization: given a bug report, find the program elements related to the bug.
* documentation
* distributed system analysis
* code optimization

! Related
* [[SE Data]]
* [[Writing of SE Taxonomy]]
* [[AI for SE Challenges]]